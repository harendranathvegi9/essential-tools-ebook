<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <meta http-equiv="Content-Style-Type" content="text/css" />
  <meta name="generator" content="pandoc" />
  <title>Devops Tools</title>
  <link rel="stylesheet" type="text/css" href="stylesheet.css" />
</head>
<body>
<div id="devops-tools" class="section level1">
<h1>Devops Tools</h1>
<div id="sublime-text" class="section level2">
<h2>Sublime Text</h2>
<p><strong>Text editor</strong></p>
<p><br />
Sublime Text is the most popular text editor in the office.</p>
<p>In it, we write front-end code, keep personal notes, and write blog post and web copy.</p>
<p>It loads instantly and lets you work on multiple documents which are stored from your previous work session as tabs. Built-in color coding helps you navigate and find information quickly.</p>
<p>It also has plenty of plugins to automate common tasks (like capitalization), and regular expressions, snippets, macros, and plugins like Emmet cut typing and editing time so we can concentrate more on coding and writing.</p>
<p>It has a distraction-free mode which hides absolutely everything and lets us focus.</p>
<p>Be sure to go through at least one course or a book to learn the most useful tips and tricks. The productivity boost you’ll get is well worth it.</p>
<p><br />
<br />
<img src="media/file63.png" alt="Writing front-end code" /></p>
<blockquote>
<p><strong>Writing front-end code</strong><br />
Sublime Text is our favorite text editor because it’s easy to use, popular, well documented, fully customizable, and very efficient.</p>
</blockquote>
<p><br />
<img src="media/file64.png" alt="Distraction-free mode" /></p>
<blockquote>
<p><strong>Distraction-free mode</strong><br />
We write in markdown so Sublime Text color-codes different elements and helps us concentrate on writing.</p>
</blockquote>
<p><br />
</p>
<pre><code>Platform:
• Windows, Mac, Linux

Price:
• Free
• $70</code></pre>
<p><em><a href="https://www.sublimetext.com/" class="uri">https://www.sublimetext.com/</a></em></p>
</div>
<div id="phpstorm" class="section level2">
<h2>PhpStorm</h2>
<p><strong>IDE for PHP</strong></p>
<p><br />
For backend programming, we use PhpStorm</p>
<p>It’s designed for developing in PHP (the main language we use for our back-end) and provides all the comforts of a full IDE:</p>
<ul>
<li>indexing all the classes and how they’re implemented</li>
<li>auto complete for commonly used elements</li>
<li>checking for syntax errors</li>
<li>safe refactoring</li>
<li>seeing the changes instantly in a browser</li>
<li>built-in database support</li>
<li>easy code navigation and debugging</li>
<li>different themes that are easy on the eyes</li>
</ul>
<p>It’s everything you’d expect from an IDE - and more.</p>
<p><br />
<br />
<img src="media/file65.png" alt="Spend less time coding" /></p>
<blockquote>
<p><strong>Spend less time coding</strong><br />
If you can’t remember how the class is implemented, or you hate to lose time writing another “for” loop, use an IDE like PhpStorm.</p>
</blockquote>
<p><br />
</p>
<pre><code>Platform:
• Windows, Mac, Linux

Price:
• $19.90/month</code></pre>
<p><em><a href="https://www.jetbrains.com/phpstorm/" class="uri">https://www.jetbrains.com/phpstorm/</a></em></p>
</div>
<div id="jekyll" class="section level2">
<h2>Jekyll</h2>
<p><strong>Static site generator</strong></p>
<p><br />
We publish blog articles on our website using Jekyll.</p>
<p>Our whole blog is built in Jekyll. It’s a static website generator, meaning we can build the blog dynamically in Ruby, and then generate plain HTML files without a database or executing code on the fly.</p>
<p>This results in faster loading times and improved security. It takes some time to build the blog and make everything just right, but it’s worth it.</p>
<p>We chose Jekyll over other tools because of its active community and exhaustive documentation - if we run into a problem, we can always google it.</p>
<p>It’s an improvement over our last blog where changing a typo in one place meant manually updating the post in several other places as well.</p>
<p>Having a blog on our own website is important for SEO, domain authority, and getting new subscribers - and Jekyll makes the process painless.</p>
<p><br />
<br />
<img src="media/file66.png" alt="Code for the blog" /></p>
<div class="figure">
<img src="media/file67.png" alt="Code for the blog" />
<p class="caption">Code for the blog</p>
</div>
<blockquote>
<p><strong>Generating the blog</strong><br />
We define what goes where, run Jekyll from the command line, and have an updated, ready-to-deploy blog in seconds. While we’re still developing, it automatically rebuilds the blog whenever we make a change so we can see the results in the browser immediately.</p>
</blockquote>
<p><br />
</p>
<pre><code>Platform:
• Command line

Price:
• Free</code></pre>
<p><em><a href="http://jekyllrb.com/" class="uri">http://jekyllrb.com/</a></em></p>
</div>
<div id="gulp" class="section level2">
<h2>Gulp</h2>
<p><strong>Build automation</strong></p>
<p><br />
Gulp frees us from repetitious tasks common in web development.</p>
<p>It’s a Node.js plugin that runs various tasks we’d otherwise have to run manually while developing a website, like:</p>
<ul>
<li>Sass preprocessing</li>
<li>CSS and Javascript minification and concatenation</li>
<li>includes and templates</li>
<li>image resizing and optimization</li>
<li>running a server and livereload</li>
</ul>
<p>It alone saves us a lot of development time and has a plugin for every monotonous task imaginable in web development.</p>
<p>Gulp is run from a command line and a “watch” function keeps it active in the background. It then processes files as we work on them so we can immediately see the results.</p>
<p><br />
<br />
<img src="media/file68.png" alt="Write once, run all the time" /></p>
<div class="figure">
<img src="media/file69.png" alt="Write once, run all the time" />
<p class="caption">Write once, run all the time</p>
</div>
<blockquote>
<p><strong>Write once, run all the time</strong><br />
We define which tasks to do on which pages and assets, run the “gulp” command in the terminal, and continue working without manually executing the same commands over and over.</p>
</blockquote>
<p><br />
</p>
<pre><code>Platform:
• Command line

Price:
• Free</code></pre>
<p><em><a href="http://gulpjs.com/" class="uri">http://gulpjs.com/</a></em></p>
</div>
<div id="gitlab" class="section level2">
<h2>GitLab</h2>
<p><strong>Git repository management</strong></p>
<p><br />
We host all company code on GitLab.</p>
<p>We use it to collaborate and track changes we make to Active Collab, our website, the Timer, the mobile apps, and some internal tools we built for our needs.</p>
<p>It’s an open-source solution that we host on our servers.</p>
<p>Our branching model used to be Git Flow, but we switched to GitHub Flow: when someone starts working on a bug or a feature, they make a new branch; when done, they ask for a merge request in GitLab. It’s much simpler and covers every scenario well enough.</p>
<p>We also use GitHub for some open-source libraries that we need to fork so they work with Active Collab (like when there’s a bug in our app because a library’s method doesn’t work right).</p>
<p><br />
<br />
<img src="media/file70.png" alt="We all contribute to the code base" /></p>
<blockquote>
<p><strong>We all contribute to the code base</strong><br />
When there’s a typo on a website or an article needs to be updated, we can easily make changes without interrupting the developers. We just assign who has access to different projects and the right to merge changes.</p>
</blockquote>
<p><br />
</p>
<pre><code>Platform:
• Web based

Price:
• Free self-hosted
• $39/user/yearly</code></pre>
<p><em><a href="https://about.gitlab.com/" class="uri">https://about.gitlab.com/</a></em></p>
</div>
<div id="sourcetree" class="section level2">
<h2>SourceTree</h2>
<p><strong>Local Git manager</strong></p>
<p><br />
SourceTree has a great graphical interface for working with Git.</p>
<p>We use Git for code management and version control. It lets us work together on the code without overstepping one another. To visualize where the changes were made and push them to the code base, we use SourceTree.</p>
<p>While the terminal can be more efficient in some cases, Source Tree lays out all the information without us needing to ask for it explicitly. We can see when there’s a new commit, what and where the changes are in the local repo, see all the branches — all without explicitly asking for it by typing terminal commands.</p>
<p><br />
<br />
<img src="media/file71.png" alt="Everything you need to know" /></p>
<blockquote>
<p><strong>Everything you need to know</strong><br />
You can see when there are new changes, who made them, what files were changed, all the existing branches, what’s been merged into what, etc. It makes code management so much easier.</p>
</blockquote>
<p><br />
</p>
<pre><code>Platform:
• Windows, Mac

Price:
• Free</code></pre>
<p><em><a href="https://www.sourcetreeapp.com/" class="uri">https://www.sourcetreeapp.com/</a></em></p>
</div>
<div id="jenkins" class="section level2">
<h2>Jenkins</h2>
<p><strong>Continuous integration</strong></p>
<p><br />
For continuous delivery, we use Jenkins.</p>
<p>It lets us test and build Active Collab updates when we have enough commits for a new release.</p>
<p>After we merge development commits to our production repository, Jenkins tests the code against pre-written test cases. If a test fails, we get an email. If it passes, it builds a new version of Active Collab and deploys it to our production servers so all our cloud users get the updated version.</p>
<p>Jenkins also lets us automate big processes like account migration and Active Collab translation.</p>
<p>We use Jenkins for website deployment too. When we make a change in our GitLab repository, we tell Jenkins to rebuild the website and deploy it. This way we don’t have to manually access our servers on OVH just to change a typo.</p>
<p><br />
<br />
<img src="media/file72.png" alt="Hassle-free deployment" /></p>
<blockquote>
<p><strong>Hassle-free deployment</strong><br />
We make changes to the code, push it to GitLab, and then start Jenkins to deploy the changes to the server. Jenkins can be set up to run a command automatically (like “build” or “test”) before it deploys the code.</p>
</blockquote>
<p><br />
</p>
<pre><code>Platform:
• Web based

Price:
• Free self-hosted</code></pre>
<p><em><a href="https://jenkins-ci.org/" class="uri">https://jenkins-ci.org/</a></em></p>
</div>
<div id="vagrant" class="section level2">
<h2>Vagrant</h2>
<p><strong>Virtual environment</strong></p>
<p><br />
To make sure we all develop in the same production environment, we use Vagrant.</p>
<p>Vagrant creates a virtual development environment on the computer so programmes behave as if they’re running on a machine with a specified configuration (like our production server).</p>
<p>It starts a virtual machine on our Macs, runs Debian behind the scene, and makes all our development tools behave as if they were working in Linux.</p>
<p>This way, we all work on the “same” machine and there’s no “It works on my computer” problem — this makes the transition to production smooth. Jenkins also starts Vagrant in the background before performing unit tests.</p>
<p>It’s easy to set up - you install Vagrant using the standard installer, describe what type of machine is in production (operating system and other software), then run “vagrant up” before you start developing.</p>
<p><br />
<br />
<img src="media/file73.png" alt="Our code is developed and runs on one, universal computer" /></p>
<blockquote>
<p><strong>Our code is developed and runs on one, universal computer</strong><br />
It takes some time to set up, but once it’s up and running, you can develop without worrying that the transition to a production environment will cause problems.</p>
</blockquote>
<p><br />
</p>
<pre><code>Platform:
• Command line

Price:
• Free</code></pre>
<p><em><a href="https://www.vagrantup.com/" class="uri">https://www.vagrantup.com/</a></em></p>
</div>
<div id="mamp" class="section level2">
<h2>MAMP</h2>
<p><strong>Server solution stack</strong></p>
<p><br />
When our support needs a local server to test something (and setting up Vagrant would take too long), we use MAMP.</p>
<p>It lets us install one package (containing MySQL, Apache, and PHP) and start the server in one click, without having to work in the command line.</p>
<p>Then we can look for bugs in the self-hosted edition, or fix a help article that can’t load without a server because it uses PHP code.</p>
<p>It’s the easiest solution when you need a server to run some code, but don’t have the technical know-how or the patience to work with a command line.</p>
<p><br />
<br />
<img src="media/file74.png" alt="Server in a click" /></p>
<blockquote>
<p><strong>Server in a click</strong><br />
When you need to start a server, just press one button and let MAMP do everything in the background.</p>
</blockquote>
<p><br />
<img src="media/file75.png" alt="MAMP reads files from a folder" /></p>
<blockquote>
<p><strong>MAMP reads files from a folder</strong><br />
Everything you put in htdocs, you can access from your browser by typing “localhost” as the web address.</p>
</blockquote>
<p><br />
</p>
<pre><code>Platform:
• Mac, Windows

Price:
• Free
• $39</code></pre>
<p><em><a href="https://www.mamp.info/" class="uri">https://www.mamp.info/</a></em></p>
</div>
<div id="ansible" class="section level2">
<h2>Ansible</h2>
<p><strong>Configuration management</strong></p>
<p><br />
Ansible lets us achieve consistency among all our servers.</p>
<p>Since we have a SaaS product, we need a tool to mass manage all the servers. Ansible fills that need.</p>
<p>When we need to change a few configuration parameters on all the servers, we don’t need to go to each server individually. We can change an Ansible playbook (config file) and the change will be applied to all servers controlled by Ansible.</p>
<p>This saves system administrators time so they can work more efficiently and focus on productive things instead of repetitive tasks like manual server management.</p>
<p><br />
<br />
<img src="media/file76.png" alt="Playbooks define server settings" /></p>
<div class="figure">
<img src="media/file77.png" alt="Playbooks define server settings" />
<p class="caption">Playbooks define server settings</p>
</div>
<blockquote>
<p><strong>Playbooks define server settings</strong><br />
Once you write a playbook for your servers, updating them is quick and easy.</p>
</blockquote>
<p><br />
</p>
<pre><code>Platform:
• Command line
• Web based

Price:
• Free self-hosted
• $5,000/year</code></pre>
<p><em><a href="http://www.ansible.com/" class="uri">http://www.ansible.com/</a></em></p>
</div>
<div id="sequel-pro" class="section level2">
<h2>Sequel Pro</h2>
<p><strong>MySQL database management</strong></p>
<p><br />
For manual database manipulation, we use Sequel Pro.</p>
<p>It’s a handy tool for manually correcting certain SQL records and troubleshooting during development. We can see what the database looks like, what the relations are between tables, and run custom queries when we’re looking for a particular piece of information.</p>
<p>When a user reports a bug in their Active Collab and gives us login credentials, we can access their remote databases and see where the problem is.</p>
<p>You can technically do the same things in the command-line, but just like SourceTree, it’s faster and easier when you’re using a graphical interface.</p>
<p><br />
<br />
<img src="media/file78.png" alt="What Active Collab looks like from inside" /></p>
<blockquote>
<p><strong>What Active Collab looks like from inside</strong><br />
During development, we can open Sequel Pro to see all the data, like a list of all the projects, tasks, and anything else we need to know.</p>
</blockquote>
<p><br />
</p>
<pre><code>Platform:
• Mac

Price:
• Free</code></pre>
<p><em><a href="http://www.sequelpro.com/" class="uri">http://www.sequelpro.com/</a></em></p>
</div>
<div id="phpmyadmin" class="section level2">
<h2>phpMyAdmin</h2>
<p><strong>MySQL database management</strong></p>
<p><br />
phpMyAdmin is a handy alternative to Sequel Pro for inspecting an SQL database of a web app.</p>
<p>It’s good for less tech savvy people who have only basic knowledge of how databases work. For example, our support uses it to inspect the database on their local computer in order replicate a bug.</p>
<p>phpMyAdmin doesn’t require much setup and can be accessed from a browser like any web app. All you have to do is download the app, put it in the “htdocs” folder where MAMP reads the files, and navigate to its path in your web browser.</p>
<p>You can change records, inspect tables, and have access to all the information stored in the app.</p>
<p><br />
<br />
<img src="media/file79.png" alt="Quickly manipulate any web app" /></p>
<blockquote>
<p><strong>Quickly manipulate any web app</strong><br />
All web apps use a database to store information like usernames, passwords, dates, etc. With phpMyAdmin you can inspect what your database looks like and change the records.</p>
</blockquote>
<p><br />
</p>
<pre><code>Platform:
• Web based

Price:
• Free</code></pre>
<p><em><a href="https://www.phpmyadmin.net/" class="uri">https://www.phpmyadmin.net/</a></em></p>
</div>
</div>
</body>
</html>

